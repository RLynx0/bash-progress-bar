#!/bin/bash

DEFAULT__DEMO_TOTAL=250
DEFAULT__BAR='minimal'
DEFAULT__EMPTY_STR=' '
DEFAULT__COLORS='none'
DEFAULT__BAR_START='['
DEFAULT__BAR_END='] '
DEFAULT__STATUS_FMT='{perc}%'
DEFAULT__WIDTH=100
DEFAULT__MAX_WIDTH=''
DEFAULT__INTERVAL=1

BAR="${BAR:-"$DEFAULT__BAR"}"
EMPTY_STR="${EMPTY_STR:-"$DEFAULT__EMPTY_STR"}"
COLORS="${COLORS:-"$DEFAULT__COLORS"}"
BAR_START="${BAR_START:-"$DEFAULT__BAR_START"}"
BAR_END="${BAR_END:-"$DEFAULT__BAR_END"}"
STATUS_FMT="${STATUS_FMT:-"$DEFAULT__STATUS_FMT"}"
WIDTH="${WIDTH:-"$DEFAULT__WIDTH"}"
MAX_WIDTH="${MAX_WIDTH:-"$DEFAULT__MAX_WIDTH"}"
INTERVAL="${INTERVAL:-"$DEFAULT__INTERVAL"}"

CALLNAME="${0##*/}"
BARCHARS=('#')
GRADIENT=()
ARGS=()
DEMO=''

declare pb_last_cols
declare pb_last_color
declare pb_last_index
declare -a pb_last_totals
declare -a pb_last_bar_percs
declare -a pb_last_status_texts
function pb_reset-vars {
  pb_last_cols=''
  pb_last_color=''
  pb_last_index=''
  pb_last_totals=()
  pb_last_bar_percs=()
  pb_last_status_texts=()
}

function hexlerp {
  local a="$1"; local b="$2"; local step="$3"; local steps="$4"
  echo "$((16#${a} + (16#${b} - 16#${a}) * step / steps))"
}

function pb_get-color {
  local cur="$(($1 - 1))"
  local last="$(($2 - 1))"
  local n_colors="${#GRADIENT[@]}"
  [ "$n_colors" -eq 0 ] && echo '' && return

  local grad_full_i="$((cur * (n_colors - 1)))"
  local lerp_val="$((grad_full_i % last))"
  local i="$(((grad_full_i / last) % n_colors))"
  local j="$(((i + 1) % n_colors))"

  local c0; local c1
  local r; local g; local b
  if [ "$lerp_val" -eq 0 ]; then
    c0="${GRADIENT["$i"]}"
    r="$((16#${c0:0:2}))"
    g="$((16#${c0:2:2}))"
    b="$((16#${c0:4:2}))"
  else
    c0="${GRADIENT["$i"]}"
    c1="${GRADIENT["$j"]}"
    r="$(hexlerp "${c0:0:2}" "${c1:0:2}" "$lerp_val" "$last")"
    g="$(hexlerp "${c0:2:2}" "${c1:2:2}" "$lerp_val" "$last")"
    b="$(hexlerp "${c0:4:2}" "${c1:4:2}" "$lerp_val" "$last")"
  fi

  local color="\033[38;2;${r};${g};${b}m"
  [ "$color" == "$pb_last_color" ] && echo '' && return
  pb_last_color="$color"
  echo "$color"
}

function pb_reset-color {
  local color="\033[0m"
  [ "$color" == "$pb_last_color" ] && echo '' && return
  pb_last_color="$color"
  echo "$color"
}

function pb_get-status-text {
  local done="$1"
  local todo="$2"
  local perc="$((done * 100 / todo))"
  local text="$STATUS_FMT"

  while [[ "$text" =~ \{([a-zA-Z_][a-zA-Z0-9_]*|\"[^\{\"]+\")(:(([<>])?|(.+)([<>]))([0-9]+))?\} ]]; do
    local st_match="${BASH_REMATCH[0]}"
    local st_expr="${BASH_REMATCH[1]}"
    local st_pad_len="${BASH_REMATCH[7]:-0}"
    local st_pad_str="${BASH_REMATCH[5]:-" "}"
    local st_pad_side="${BASH_REMATCH[4]:-${BASH_REMATCH[6]}}"

    local st_resolved=''
    local st_padding=''
    local st_final=''

    [[ "$st_expr" =~ ^\"(.+)\"$ ]] \
    && st_resolved="${BASH_REMATCH[1]}" \
    || st_resolved="${!st_expr}"
    for ((i = 0; i < st_pad_len - ${#st_resolved}; i++)); do
      st_padding+="${st_pad_str:i % ${#st_pad_str}:1}"
    done
    case "$st_pad_side" in
      '<'|'') st_final="${st_padding}${st_resolved}" ;;
      '>')    st_final="${st_resolved}${st_padding}" ;;
    esac

    text="${text/"$st_match"/"$st_final"}"
  done

  echo "$text"
}

# Returns ANSII code to move cursor left or right
function pb_move-horizontal {
  m="$1"
  if   [ "$m" -eq 0 ]; then echo ''
  elif [ "$m" -gt 0 ]; then echo "\033[${m}C"
  elif [ "$m" -lt 0 ]; then echo "\033[$((0 - m))D"
  fi
}

# Returns ANSII code to move cursor up or down
function pb_move-vertical {
  m="$1"
  if   [ "$m" -eq 0 ]; then echo ''
  elif [ "$m" -gt 0 ]; then echo "\033[${m}B"
  elif [ "$m" -lt 0 ]; then echo "\033[$((0 - m))A"
  fi
}

function pb_print-bar {
  local index="$1"
  local done="$2"
  local todo="$3"

  # Return early depending on interval
  [ "$((done % INTERVAL))" -eq 0 ] \
  || [ "$done" -eq "$todo" ] \
  || return

  # Sanity checks
  [ "$todo" -le 0 ] && todo=1
  [ "$done" -lt 0 ] && done=0
  [ "$done" -gt "$todo" ] && done="$todo"

  # Get terminal space and reserved area length
  local cols="${COLUMNS:-$(tput cols)}"
  local status_text="$(pb_get-status-text "$done" "$todo")"
  local final_status="$(pb_get-status-text "$todo" "$todo")"
  local reserved="$((${#BAR_START} + ${#BAR_END} + ${#final_status} + 1))"

  # Scale cols to width-perc and max-width
  [ "$WIDTH" -le 100 ] && cols=$((cols * WIDTH / 100))
  [ -n "$MAX_WIDTH" ] && [ "$cols" -gt "$MAX_WIDTH" ] && cols="$MAX_WIDTH"
  [ "$cols" -lt "$reserved" ] && cols="$reserved"

  # Last status_text and bar_perc
  local last_status_text="${pb_last_status_texts["$index"]}"
  local last_bar_perc="${pb_last_bar_percs["$index"]}"

  # Pad out status_text to overwrite longer old one
  while [ "${#status_text}" -lt "${#final_status}" ]; do
    status_text+=" "
  done

  # Variables related to the actual bar
  local bfactor="${#BARCHARS[@]}"
  local available="$((cols - reserved))"
  local full_bar="$((available * bfactor))"
  local bar_perc="$((done * full_bar / todo))"
  local sub_i="$((bar_perc % bfactor))"

  # Return early if nothing changed
  [ "$cols" == "$pb_last_cols" ] \
  && [ "$bar_perc" == "$last_bar_perc" ] \
  && [ "$status_text" == "$last_status_text" ] \
  && return
  
  # Work variables
  local i; local a; local b; local c
  local ma="-${#final_status}"
  local mc=0
  local color

  # Choose draw mode
  local draw_to_bar=''
  local full_redraw=''
  local draw_empty_to=0
  if [ "${pb_last_totals["$index"]}" != "$todo" ]; then
    # Terminal window changed -> Redraw everything
    pb_last_totals["$index"]="$todo"
    draw_empty_to="$available"
    pb_last_cols="$cols"
    last_bar_perc=0
    draw_to_bar=1
    full_redraw=1
  elif [ "$last_bar_perc" -lt "$bar_perc" ]; then
    # Only progress changed -> Add new bar-characters
    # Calculate cursor offset to overwrite only the changed section
    ma="$((ma - ${#BAR_END} - available + (last_bar_perc / bfactor)))"
    mc="$((mc + (full_bar - bar_perc) / bfactor + ${#BAR_END}))"
    draw_to_bar=1
  elif [ "$last_bar_perc" -gt "$bar_perc" ]; then
    # Redraw bar section cleanly
    ma="$((ma - ${#BAR_END} - available + (bar_perc / bfactor)))"
    draw_empty_to="$(((last_bar_perc + bfactor - 1) / bfactor))"
    mc="$((mc + available - draw_empty_to + ${#BAR_END}))"
    last_bar_perc="$bar_perc"
    draw_to_bar=1
  fi

  if [ -n "$full_redraw" ]; then
    # Full redraw: Clear the line and draw all elements
    a="\r\033[K${BAR_START}"
    c="${BAR_END}"
  else
    # Incremental update: Just move cursor to the right places
    a="$(pb_move-horizontal "$ma")"
    c="$(pb_move-horizontal "$mc")"
  fi

  if [ -n "$draw_to_bar" ]; then
    # Continue drawing bar from last progress point
    i="$((last_bar_perc / bfactor))"
    for ((; i < bar_perc / bfactor; i++)); do
      color="$(pb_get-color "$(((i + 1) * bfactor))" "$full_bar")"
      b+="${color}${BARCHARS[-1]}"
    done

    # Add sub-character for fractional progress
    if [ "$sub_i" -gt 0 ]; then
      color="$(pb_get-color "$bar_perc" "$full_bar")"
      b+="${color}${BARCHARS["$((sub_i - 1))"]}"
      i="$((i + 1))"
    fi

    # Reset color
    b+="$(pb_reset-color)"

    # Pad with empty characters
    for ((; i < draw_empty_to; i++)); do
      b+="${EMPTY_STR:i % ${#EMPTY_STR}:1}"
    done
  fi

  # Save current state for next update
  pb_last_index="$index"
  pb_last_bar_percs["$index"]="$bar_perc"
  pb_last_status_texts["$index"]="$status_text"

  # Draw the bar and status
  echo -ne "${a}${b}${c}${status_text}"
}

function pb_animate-progress-bars {
  local -a totals=("$1")
  local -a values=()
  local bar_index=0
  local i; local n
  local nb=1

  while read x; do
    x="${x// /}"
    [[ "$x" =~ ^([0-9]+:)?[+-]?[0-9]+(/[1-9][0-9]*)?$ ]] \
    && [ -n "$x" ] || continue;

    [[ "$x" =~ : ]] && i="${x%:*}" || i="$bar_index"
    [[ "$x" =~ / ]] && totals["$i"]="${x#*/}"
    totals["$i"]="${totals["$i"]:-"$1"}"
    values["$i"]="${values["$i"]:-0}"

    n="${x#*:}"; n="${n%/*}"
    if [[ "$n" =~ \+ ]]; then
      n="$((values[i] + ${n#\+}))"
    elif [[ "$n" =~ - ]]; then
      n="$((values[i] - ${n#-}))"
    fi

    while [ "$nb" -le "$i" ]; do
      nb=$((nb + 1))
      bar_index=$((bar_index + 1))
      echo
    done

    echo -en "$(pb_move-vertical $((i - bar_index)))"
    pb_print-bar "$i" "$n" "${totals["$i"]}"

    values["$i"]="$n"
    bar_index="$i"
  done

  for ((i = bar_index; i < nb; i++)); do echo; done
}

function pb_demo {
  total="$1"
  stty -echo -icanon
  for ((n = 0; n <= total; n++)); do echo "$n"
  done | COLUMNS='' pb_animate-progress-bars "$total"
  stty sane
}

function pb_show-off {
  local total="$1"
  
  echo '╔═════════════════════╗'
  echo '║ Showing off PRESETS ║'
  echo '╚═════════════════════╝'
  for demo_preset in "${PRESET_NAMES[@]}"; do
    resolve_preset "$demo_preset"
    echo -e "\n=>> Option: --preset '$demo_preset'"
    pb_reset-vars; pb_demo "$total"
  done

  echo -e '\n'
  resolve_preset 'bare'
  STATUS_FMT='{done}/{todo}'
  BAR_END=' '; EMPTY_STR='-'
  echo '╔═════════════════════════╗'
  echo '║ Showing off BAR-PRESETS ║'
  echo '╚═════════════════════════╝'
  for demo_bar in "${BAR_PRESET_NAMES[@]}"; do
    resolve_bar "$demo_bar"
    echo -e "\n=>> Option: --bar '$demo_bar'"
    echo "==> Equals: --bar '$(printf "%s" "${BARCHARS[@]}")'"
    pb_reset-vars; pb_demo "$total"
  done

  echo -e '\n'
  resolve_bar 'smooth'
  echo '╔═══════════════════════════╗'
  echo '║ Showing off COLOR-PRESETS ║'
  echo '╚═══════════════════════════╝'
  for demo_color in "${COLOR_PRESET_NAMES[@]}"; do
    resolve_colors "$demo_color"
    echo -e "\n=>> Option: --colors '$demo_color'"
    [ "${#GRADIENT[@]}" -gt 0 ] \
    && echo "==> Equals: --colors '$(printf "#%s;" "${GRADIENT[@]}")'"
    pb_reset-vars; pb_demo "$total"
  done
}

function print_help {
  echo "Usage: $CALLNAME [OPTIONS] TOTAL"
  echo
  echo "Animate a progress bar with customizable colors, characters, and styles."
  echo
  echo "Arguments:"
  echo "  TOTAL                 Progress value (required for normal execution)."
  echo "                        Must be a non-negative integer."
  echo "                        Defaults to $DEFAULT__DEMO_TOTAL when running in demo mode."
  echo
  echo "Options:"
  echo "  -p, --preset NAME     Use a predefined preset."
  echo "                        The 'bare' preset uses empty strings wherever possible."
  echo "                        The following presets are available:"
  echo "                        $(printf "'%s' " "${PRESET_NAMES[@]}")"
  echo "  -c, --colors LIST     Define gradient colors. Can be:"
  echo "                          - A comma/semicolon/space separated list of hex colors"
  echo "                            (e.g. '#60C0C0, #C080D8')"
  echo "                          - One of these predefined gradients:"
  echo "                            $(printf "'%s' " "${COLOR_PRESET_NAMES[@]}")"
  echo "  -b, --bar NAME        Define bar characters. Can be:"
  echo "                          - A custom string (each character used in sequence)"
  echo "                          - One of these predefined character sets:"
  echo "                            $(printf "'%s' " "${BAR_PRESET_NAMES[@]}")"
  echo "  -E, --empty-str STR   String used to tile empty space in the bar."
  echo "                        Defaults to '$DEFAULT__EMPTY_STR'."
  echo "  -s, --bar-start STR   String shown at the start of the bar."
  echo "                        Defaults to '$DEFAULT__BAR_START'."
  echo "                        Using '--preset bare' sets this to be empty."
  echo "  -e, --bar-end STR     String shown at the end of the bar."
  echo "                        Defaults to '$DEFAULT__BAR_END'."
  echo "                        Using '--preset bare' sets this to be empty."
  echo "  -f, --status-fmt FMT  Format string for status."
  echo "                        Defaults to '$DEFAULT__STATUS_FMT'."
  echo "                        Using '--preset bare' sets this to be empty."
  echo "                        Available placeholders:"
  echo "                          {done}   Completed steps"
  echo "                          {todo}   Remaining steps"
  echo "                          {perc}   Percentage done"
  echo "  -i, --interval N      Update only if input is divisible by N."
  echo "  -w, --width P         Percentage of the terminal width the bar should use."
  echo "  -W, --max-width N     Maximum width of the bar in columns."
  echo "  --demo                Run a demo of the progress bar."
  echo "  --show-off            Run demos of all presets, bar presets and color presets."
  echo "  -?, -h, --help        Show this help and exit."
  echo
  echo "Examples:"
  echo "  $CALLNAME -p rainbow 50"
  echo "  $CALLNAME --colors '#FF0000;#00FF00;#0000FF' 75"
  echo "  $CALLNAME --bar '.*|' --width 40 --demo"
  echo "  $CALLNAME --demo -p bare -c matrix -b 0123456789 -W 10"
  echo "  $CALLNAME --show-off -w 50"
}

function assert_arg {
  if [ -z "$2" ]; then
    echo "$1 requires an argument" >&2
    echo "Pass the --help flag for usage" >&2
    exit 1
  fi
}

function assert_num {
  assert_arg "$1" "$2"
  if ! [[ "$2" =~ ^[0-9]+$ ]]; then
    echo "Invalid argument for $1: '$2'" >&2
    echo "Must be a non-negative integer" >&2
    echo "Pass the --help flag for usage" >&2
    exit 1
  fi
}

COLOR_PRESET_NAMES=(
  'none'

  # Simple
  'red'  'yellow' 'green'
  'cyan' 'blue'   'magenta'

  # Gradients
  'cool'   'galaxy' 'frost'  'ocean'
  'matrix' 'forest' 'health' 'fire'
  'sunset' 'candy'  'pride'
)
function resolve_colors {
  local colors="$1"
  local parsed

  if [[ "$colors" =~ ^(#?[a-fA-F0-9]{6}( *[;, ] *|$))*$ ]]; then
    parsed="${colors//[,;#]/ }"
  else
    case "$colors" in
      'none') parsed='' ;;

      'red')     parsed='FF0000' ;;
      'yellow')  parsed='FFFF00' ;;
      'green')   parsed='00FF00' ;;
      'cyan')    parsed='00FFFF' ;;
      'blue')    parsed='0000FF' ;;
      'magenta') parsed='FF00FF' ;;

      'cool')   parsed='60C0C0 C080D8'                             ;;
      'galaxy') parsed='226088 4B2BA2 FF44FF'                      ;;
      'frost')  parsed='2288AA 00FFFF AFEEEE'                      ;;
      'ocean')  parsed='0066FF 00CCCC 00FF99'                      ;;
      'matrix') parsed='003300 00CC00 66FF66'                      ;;
      'forest') parsed='228B22 6B8E23 ADFF2F'                      ;;
      'health') parsed='FF0000 FFFF00 00FF00'                      ;;
      'fire')   parsed='FF4500 FF8C00 FFD722'                      ;;
      'sunset') parsed='FF4500 FF6347 FF1493'                      ;;
      'candy')  parsed='FF69B4 FFB6C1 FFD1DC'                      ;;
      'pride')  parsed='CC2222 CCCC22 22CC22 22CCCC 2222CC CC22CC' ;;

      *)
        {
          echo "Invalid colors: '$colors'"
          echo "Use a list of hex-colors, e.g. '#60C0C0, #C080D8'"
          echo "Alternatively, use one of these predefined gradients:"
          for name in "${COLOR_PRESET_NAMES[@]}"; do
            echo "- '$name'"
          done
        } >&2
        exit 1
        ;;
    esac
  fi

  GRADIENT=()
  for color in $parsed; do
    GRADIENT+=($color)
  done
}

BAR_PRESET_NAMES=(
  'minimal'
  'blocky'
  'pipes'
  'dots'
  'fade'
  'paint'
  'pixel'
  'ramp'
  'smooth'
)
function resolve_bar {
  local bar="$1"
  case "$bar" in
    'minimal') BARCHARS=('#')                             ;;
    'blocky')  BARCHARS=('>' '%' '#')                     ;;
    'pipes')   BARCHARS=('.' ':' '!' '|')                 ;;
    'dots')    BARCHARS=('·' '•' '●')                     ;;
    'fade')    BARCHARS=('░' '▒' '▓' '█')                 ;;
    'paint')   BARCHARS=('🬀' '🬄' '▌' '🬕' '🬝' '█')         ;;
    'pixel')   BARCHARS=('▖' '▘' '▝' '▗' '▞' '▚' '█')     ;;
    'ramp')    BARCHARS=('▁' '▂' '▃' '▄' '▅' '▆' '▇' '█') ;;
    'smooth')  BARCHARS=('▏' '▎' '▍' '▌' '▋' '▊' '▉' '█') ;;
    *)
      BARCHARS=()
      for ((i = 0; i < ${#bar}; i++)); do
        BARCHARS+=("${bar:i:1}");
      done
      ;;
  esac
}

PRESET_NAMES=(
  'bare'
  'simple'
  'slick'
  'flame'
  'wave'
  'hacker'
  'rainbow'
)
function resolve_preset {
  case "$1" in
    '') ;;
    'bare')
      resolve_colors 'none';
      resolve_bar 'minimal';
      EMPTY_STR=' ';
      BAR_START='';
      BAR_END='';
      STATUS_FMT=''
      ;;
    'simple')
      resolve_colors 'none';
      resolve_bar 'minimal';
      EMPTY_STR=' ';
      BAR_START='[';
      BAR_END='] ';
      STATUS_FMT='{perc}%'
      ;;
    'slick')
      resolve_colors 'cool';
      resolve_bar 'blocky';
      EMPTY_STR='- ';
      BAR_START='[';
      BAR_END='] ';
      STATUS_FMT='{done}/{todo}'
      ;;
    'flame')
      resolve_colors 'fire';
      resolve_bar 'pipes';
      EMPTY_STR='.';
      BAR_START='{';
      BAR_END='} ';
      STATUS_FMT='{perc}!';
      ;;
    'wave')
      resolve_colors 'ocean';
      resolve_bar 'ramp';
      EMPTY_STR=' ';
      BAR_START='🮇';
      BAR_END='▏ ';
      STATUS_FMT='{done}/{todo}';
      ;;
    'hacker')
      resolve_colors 'matrix';
      resolve_bar 'fade';
      EMPTY_STR=' ';
      BAR_START='░';
      BAR_END='░ ';
      STATUS_FMT='PROGRESS {perc}%';
      ;;
    'rainbow')
      resolve_colors 'pride';
      resolve_bar 'smooth';
      EMPTY_STR='-';
      BAR_START='(:🮇';
      BAR_END='▏:) ';
      STATUS_FMT='{done}/{todo} ({perc}%)'
      ;;
    *)
      {
        echo "Unknown preset: '$1'"
        echo "Available presets are:"
        for name in "${PRESET_NAMES[@]}"; do
          echo "- '$name'"
        done
      } >&2
      exit 1
      ;;
  esac
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    '-p'|'--preset')     assert_arg "$1" "$2"; resolve_preset "$2"; shift 2 ;;
    '-c'|'--colors')     assert_arg "$1" "$2"; resolve_colors "$2"; shift 2 ;;
    '-b'|'--bar')        assert_arg "$1" "$2"; resolve_bar "$2";    shift 2 ;;
    '-E'|'--empty_str')  assert_arg "$1" "$2"; EMPTY_STR="$2";      shift 2 ;;
    '-s'|'--bar-start')  assert_arg "$1" "$2"; BAR_START="$2";      shift 2 ;;
    '-e'|'--bar-end')    assert_arg "$1" "$2"; BAR_END="$2";        shift 2 ;;
    '-f'|'--status-fmt') assert_arg "$1" "$2"; STATUS_FMT="$2";     shift 2 ;;
    '-i'|'--interval')   assert_num "$1" "$2"; INTERVAL="$2";       shift 2 ;;
    '-w'|'--width')      assert_num "$1" "$2"; WIDTH="$2";          shift 2 ;;
    '-W'|'--max-width')  assert_num "$1" "$2"; MAX_WIDTH="$2";      shift 2 ;;
    '--show-off') DEMO='ALL';        shift ;;
    '--demo')     DEMO="${DEMO:-1}"; shift ;;

    '-?'|'-h'|'--help') print_help; exit 0 ;;
    '--') shift; break ;;
    *)
      if [[ "$1" =~ ^-+.* ]]; then
        echo "Unknown option: '$1'" >&2
        echo "Pass the --help flag for usage" >&2
        exit 1
      else
        ARGS+=("$1")
        shift
      fi
      ;;
  esac
done

while [[ $# -gt 0 ]]; do ARGS+=($1); shift; done
if [ "${#ARGS[@]}" -gt 1 ]; then
  echo "Unexpected argument: '${ARGS[1]}'" >&2
  echo "Pass the --help flag for usage" >&2
  exit 1
fi

declare total="${ARGS[0]}"
[ -n "$DEMO" ] && total="${total:-"$DEFAULT__DEMO_TOTAL"}"
if [ -n "$total" ] && ! [[ "$total" =~ ^[0-9]+$ ]]; then
  echo "Invalid argument: '$total'" >&2
  echo "TOTAL must be a non-negative integer" >&2
  echo "Pass the --help flag for usage" >&2
  exit 1
fi

if   [ "$DEMO" == 'ALL' ]; then pb_show-off $total
elif [ -n "$DEMO"       ]; then pb_demo $total
elif [ -n "$total"  ]; then pb_animate-progress-bars $total
else
  echo "Usage: $CALLNAME [OPTIONS] TOTAL" >&2
  echo "Pass the --help flag for details" >&2
  exit 1
fi
